Smartsoundsync is a distributed audio solution providing simple to use single client and syncronized multiroom audio.  Smartsound currently supports Spotify, Airplay, and hardware capture.  

Airplay and Spotify playback sink selection, including multiroom groups, is done via native Spotify and Airplay controls on your playback device such as your phone, tablet, or computer.  There are no extra interfaces to fumble with.  The negative of this is that all multiroom groups must be pre-defined in the smartsoundsync configuration, and that all groups and individual clients show up in the native playback selection list of Airplay and Spotify.  This tradeoff was worth it to me to not have to fumble with or teach guests to my home how to use a seperate custom interface.  Any Airplay or Spotify capble device connected to my home network will see this list of available playback sinks shown below.

Bedroom
Kitchen
Livingroom
Familyroom
Sunroom
KitLiv
KitFam
KitSun
BedKit
KitLivSun
KitLivFam
KitLivFamSun
Upstairs
All

An instance of Librespot or Shairport-Sync is run for each item listed above, waiting for you to select it from your Spotify or Airplay device.  Each source is hardcoded to playback to a specific sink or group of sinks which is indicated by the name of the source.  A central controller and priority system determines which source each sink will connect to for playback should there be multiple sources trying to playback to a sink.  Each single sink runs 100% on that Smartsoundsync instance so it is self sufficient.  Multiroom sources can be configured to run on any instance of Smartsoundsync, though it is reccomended to pick an instance physically connected to your network to prevent Multiroom packets from having to traverse your wireless network twice, even if that means adding a cheap computer such as a Raspberry Pi at your network router solely for this purpose.

Hardware capture is also provided for with Smartsoundsync.  Currently I use this with a Hifiberry Dac+DSP card to capture SPDIF audio from my TV.  SPDIF playback is given the highest priority in my configuration, so if I'm listening to multiroom audio and the kids turn on the TV for example, the audio of that Smartsoundsync sink automatically switches to the TV.  You do not have to be so kind in your configuration, it is possible to set SPDIF to any priority you want.  For volume control Smartsoundsync uses lirc to capture and use the existing volume control buttons on your TV remote.  Smartsoundsync will automatically install lirc for this purpose.  Configuration of lirc for your specific system, infrared sensor connection method, and TV remote model is left to the user.  SPDIF source does not currently support selection of differnt groups of sinks, mostly because I don't need it, though any sink including multiroom groups can be hardcoded to the SPDIF source.  I could modify Smartsoundsync to allow assignment of an unused button on your TV remote to scroll through a pre-configured list of playback sinks if desired.

The components which make up Smartsoundsync are modular for greater flexibility in it's configuration.  The current components are SourceSpotify, SourceAirplay, SourceSPDIF, Controller, and Sink.  A Sink instance can be run on one computer for the left speaker and on another for the right and they will remain in sync.  A SourceSPDIF instance can be installed behind a TV to capture SPDIF TV audio and transmit it to a Controller and Sink instance running in your stereo cabinet.  An instance can run stand alone or connect to another instance configured to be a multiroom server.  

Installation:

  To install only:
    cd && wget https://raw.githubusercontent.com/mikeszila/smartsoundsync/main/install.sh -O - | sudo /bin/bash

  To install as a git repository:
    Go to https://github.com/mikeszila/smartsoundsync and fork the repository
    git clone https://github.com/mikeszila/smartsoundsync.git
    cd smartsoundsync
    sudo apt install nodejs
    sudo node install-setup.js 

  The first time you run the program it will complain that a config file does not exist, create a basic config file, and ask you to verify it.  Run the install again and it'll install and run.
  
Configuration:

Configuration examples are provided in the config_examples folder. 

Sink names are based on the system's hostname by default but is configurable.  I've been modifying /etc/hostname and /etc/hosts directly to be able to configure hostnames with capital letters with no ill effects. 
